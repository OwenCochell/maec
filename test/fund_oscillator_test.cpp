/**
 * @file fund_oscillator_test.cpp
 * @author Owen Cochell (owencochell@gmail.com)
 * @brief This class tests the fundamental oscillators
 * @version 0.1
 * @date 2022-10-01
 *
 * @copyright Copyright (c) 2022
 *
 */

#include "fund_oscillator.hpp"

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>
#include <memory>
#include <vector>

#include "audio_buffer.hpp"
#include "base_oscillator.hpp"

// Vector of an ideal sine wave, generated in Audacity
const std::vector<long double> prime_sine = {
    0.00000,  0.06265,  0.12505,  0.18696,  0.24814,  0.30834,  0.36733,
    0.42488,  0.48075,  0.53474,  0.58663,  0.63622,  0.68330,  0.72770,
    0.76924,  0.80776,  0.84310,  0.87514,  0.90373,  0.92878,  0.95017,
    0.96783,  0.98170,  0.99170,  0.99781,  0.99999,  0.99825,  0.99259,
    0.98303,  0.96960,  0.95237,  0.93139,  0.90676,  0.87856,  0.84691,
    0.81194,  0.77377,  0.73257,  0.68848,  0.64170,  0.59239,  0.54075,
    0.48699,  0.43131,  0.37395,  0.31511,  0.25503,  0.19395,  0.13212,
    0.06976,  0.00712,  -0.05554, -0.11798, -0.17996, -0.24123, -0.30155,
    -0.36069, -0.41842, -0.47450, -0.52871, -0.58085, -0.63070, -0.67808,
    -0.72279, -0.76467, -0.80354, -0.83925, -0.87167, -0.90066, -0.92611,
    -0.94793, -0.96602, -0.98031, -0.99076, -0.99731, -0.99994, -0.99865,
    -0.99343, -0.98431, -0.97132, -0.95452, -0.93396, -0.90974, -0.88194,
    -0.85068, -0.81608, -0.77827, -0.73740, -0.69363, -0.64714, -0.59811,
    -0.54673, -0.49320, -0.43773, -0.38054, -0.32186, -0.26191, -0.20094,
    -0.13917, -0.07686, -0.01425, 0.04842,  0.11090,  0.17295,  0.23431,
    0.29476,  0.35404,  0.41194,  0.46821,  0.52265,  0.57503,  0.62516,
    0.67283,  0.71785,  0.76006,  0.79928,  0.83536,  0.86815,  0.89754,
    0.92340,  0.94563,  0.96415,  0.97888,  0.98977,  0.99676,  0.99984,
    0.99899,  0.99422,  0.98554,  0.97299,  0.95662,  0.93648,  0.91267,
    0.88528,  0.85440,  0.82017,  0.78272,  0.74219,  0.69875,  0.65256,
    0.60380,  0.55268,  0.49938,  0.44412,  0.38712,  0.32860,  0.26878,
    0.20791,  0.14622,  0.08396,  0.02137,  -0.04131, -0.10382, -0.16593,
    -0.22738, -0.28794, -0.34737, -0.40543, -0.46191, -0.51656, -0.56919,
    -0.61958, -0.66754, -0.71288, -0.75541, -0.79498, -0.83142, -0.86460,
    -0.89438, -0.92064, -0.94329, -0.96224, -0.97740, -0.98872, -0.99616,
    -0.99969, -0.99929, -0.99496, -0.98672, -0.97461, -0.95867, -0.93896,
    -0.91556, -0.88857, -0.85808, -0.82423, -0.78713, -0.74695, -0.70382,
    -0.65794, -0.60947, -0.55860, -0.50554, -0.45050, -0.39368, -0.33532,
    -0.27564, -0.21487, -0.15327, -0.09106, -0.02849, 0.03419,  0.09673,
    0.15890,  0.22044,  0.28111,  0.34068,  0.39891,  0.45558,  0.51045,
    0.56332,  0.61398,  0.66222,  0.70786,  0.75072,  0.79064,  0.82744,
    0.86100,  0.89117,  0.91784,  0.94090,  0.96027,  0.97587,  0.98763,
    0.99551,  0.99949,  0.99953,  0.99565,  0.98785,  0.97618,  0.96067,
    0.94139,  0.91840,  0.89181,  0.86172,  0.82824,  0.79151,  0.75166,
    0.70887,  0.66329,  0.61510,  0.56450,  0.51168,  0.45684,  0.40022,
    0.34202,  0.28248,  0.22183,  0.16030,  0.09815,  0.03561,  -0.02707,
    -0.08964, -0.15186, -0.21348, -0.27427, -0.33397, -0.39237, -0.44922,
    -0.50431, -0.55742, -0.60834, -0.65687, -0.70281, -0.74600, -0.78625,
    -0.82342, -0.85735, -0.88791, -0.91499, -0.93847, -0.95826, -0.97429,
    -0.98649, -0.99482, -0.99923, -0.99972, -0.99629, -0.98894, -0.97770,
    -0.96262, -0.94377, -0.92120, -0.89501, -0.86531, -0.83221, -0.79584,
    -0.75634, -0.71387, -0.66860, -0.62070, -0.57036, -0.51778, -0.46317,
    -0.40674, -0.34871, -0.28930, -0.22877, -0.16733, -0.10524, -0.04273,
    0.01995,  0.08254,  0.14481,  0.20652,  0.26741,  0.32725,  0.38581,
    0.44285,  0.49815,  0.55149,  0.60267,  0.65148,  0.69773,  0.74124,
    0.78183,  0.81936,  0.85366,  0.88461,  0.91209,  0.93598,  0.95620,
    0.97266,  0.98530,  0.99407,  0.99893,  0.99987,  0.99688,  0.98997,
    0.97917,  0.96453,  0.94610,  0.92395,  0.89817,  0.86886,  0.83614,
    0.80013,  0.76098,  0.71884,  0.67388,  0.62627,  0.57620,  0.52386,
    0.46947,  0.41323,  0.35537,  0.29612,  0.23570,  0.17435,  0.11232,
    0.04985,  -0.01282, -0.07544, -0.13776, -0.19954, -0.26054, -0.32051,
    -0.37923, -0.43645, -0.49196, -0.54553, -0.59697, -0.64606, -0.69261,
    -0.73643, -0.77737, -0.81525, -0.84993, -0.88127, -0.90915, -0.93345,
    -0.95409, -0.97098, -0.98406, -0.99327, -0.99857, -0.99996, -0.99741,
    -0.99095, -0.98059, -0.96639, -0.94838, -0.92665, -0.90128, -0.87237,
    -0.84003, -0.80439, -0.76559, -0.72378, -0.67913, -0.63181, -0.58201,
    -0.52992, -0.47575, -0.41971, -0.36202, -0.30291, -0.24261, -0.18136,
    -0.11939, -0.05696, 0.00570,  0.06834,  0.13070,  0.19256,  0.25365,
    0.31376,  0.37262,  0.43003,  0.48574,  0.53955,  0.59124,  0.64060,
    0.68745,  0.73160,  0.77287,  0.81111,  0.84616,  0.87788,  0.90616,
    0.93087,  0.95193,  0.96925,  0.98276,  0.99242,  0.99817,  1.00000,
    0.99790,  0.99188,  0.98197,  0.96819,  0.95062,  0.92930,  0.90434,
    0.87583,  0.84387,  0.80860,  0.77015,  0.72868,  0.68434};
const std::vector<long double> prime_square = {
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, 1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, 1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000, -1.00000,
    -1.00000, -1.00000, 1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
    1.00000,  1.00000,  1.00000,  1.00000,  1.00000,  1.00000,
};
const std::vector<long double> prime_saw = {
    0.00000,  0.01995,  0.03991,  0.05986,  0.07982,  0.09977,  0.11973,
    0.13968,  0.15964,  0.17959,  0.19955,  0.21950,  0.23946,  0.25941,
    0.27937,  0.29932,  0.31927,  0.33923,  0.35918,  0.37914,  0.39909,
    0.41905,  0.43900,  0.45896,  0.47891,  0.49887,  0.51882,  0.53878,
    0.55873,  0.57868,  0.59864,  0.61859,  0.63855,  0.65850,  0.67846,
    0.69841,  0.71837,  0.73832,  0.75828,  0.77823,  0.79819,  0.81814,
    0.83810,  0.85805,  0.87800,  0.89796,  0.91791,  0.93787,  0.95782,
    0.97778,  0.99773,  -0.98231, -0.96236, -0.94240, -0.92245, -0.90249,
    -0.88254, -0.86259, -0.84263, -0.82268, -0.80272, -0.78277, -0.76281,
    -0.74286, -0.72290, -0.70295, -0.68299, -0.66304, -0.64308, -0.62313,
    -0.60317, -0.58322, -0.56327, -0.54331, -0.52336, -0.50340, -0.48345,
    -0.46349, -0.44354, -0.42358, -0.40363, -0.38367, -0.36372, -0.34376,
    -0.32381, -0.30385, -0.28390, -0.26395, -0.24399, -0.22404, -0.20408,
    -0.18413, -0.16417, -0.14422, -0.12426, -0.10431, -0.08435, -0.06440,
    -0.04444, -0.02449, -0.00454, 0.01542,  0.03537,  0.05533,  0.07528,
    0.09524,  0.11519,  0.13515,  0.15510,  0.17506,  0.19501,  0.21497,
    0.23492,  0.25488,  0.27483,  0.29478,  0.31474,  0.33469,  0.35465,
    0.37460,  0.39456,  0.41451,  0.43447,  0.45442,  0.47438,  0.49433,
    0.51429,  0.53424,  0.55419,  0.57415,  0.59410,  0.61406,  0.63401,
    0.65397,  0.67392,  0.69388,  0.71383,  0.73379,  0.75374,  0.77370,
    0.79365,  0.81361,  0.83356,  0.85351,  0.87347,  0.89342,  0.91338,
    0.93333,  0.95329,  0.97324,  0.99320,  -0.98685, -0.96689, -0.94694,
    -0.92698, -0.90703, -0.88707, -0.86712, -0.84717, -0.82721, -0.80726,
    -0.78730, -0.76735, -0.74739, -0.72744, -0.70748, -0.68753, -0.66757,
    -0.64762, -0.62766, -0.60771, -0.58776, -0.56780, -0.54785, -0.52789,
    -0.50794, -0.48798, -0.46803, -0.44807, -0.42812, -0.40816, -0.38821,
    -0.36825, -0.34830, -0.32834, -0.30839, -0.28844, -0.26848, -0.24853,
    -0.22857, -0.20862, -0.18866, -0.16871, -0.14875, -0.12880, -0.10884,
    -0.08889, -0.06893, -0.04898, -0.02902, -0.00907, 0.01088,  0.03084,
    0.05079,  0.07075,  0.09070,  0.11066,  0.13061,  0.15057,  0.17052,
    0.19048,  0.21043,  0.23039,  0.25034,  0.27029,  0.29025,  0.31020,
    0.33016,  0.35011,  0.37007,  0.39002,  0.40998,  0.42993,  0.44989,
    0.46984,  0.48980,  0.50975,  0.52971,  0.54966,  0.56961,  0.58957,
    0.60952,  0.62948,  0.64943,  0.66939,  0.68934,  0.70930,  0.72925,
    0.74921,  0.76916,  0.78912,  0.80907,  0.82902,  0.84898,  0.86893,
    0.88889,  0.90884,  0.92880,  0.94875,  0.96871,  0.98866,  -0.99138,
    -0.97143, -0.95147, -0.93152, -0.91156, -0.89161, -0.87166, -0.85170,
    -0.83175, -0.81179, -0.79184, -0.77188, -0.75193, -0.73197, -0.71202,
    -0.69206, -0.67211, -0.65215, -0.63220, -0.61224, -0.59229, -0.57234,
    -0.55238, -0.53243, -0.51247, -0.49252, -0.47256, -0.45261, -0.43265,
    -0.41270, -0.39274, -0.37279, -0.35283, -0.33288, -0.31293, -0.29297,
    -0.27302, -0.25306, -0.23311, -0.21315, -0.19320, -0.17324, -0.15329,
    -0.13333, -0.11338, -0.09342, -0.07347, -0.05351, -0.03356, -0.01361,
    0.00635,  0.02630,  0.04626,  0.06621,  0.08617,  0.10612,  0.12608,
    0.14603,  0.16599,  0.18594,  0.20590,  0.22585,  0.24580,  0.26576,
    0.28571,  0.30567,  0.32562,  0.34558,  0.36553,  0.38549,  0.40544,
    0.42540,  0.44535,  0.46531,  0.48526,  0.50522,  0.52517,  0.54512,
    0.56508,  0.58503,  0.60499,  0.62494,  0.64490,  0.66485,  0.68481,
    0.70476,  0.72472,  0.74467,  0.76463,  0.78458,  0.80454,  0.82449,
    0.84444,  0.86440,  0.88435,  0.90431,  0.92426,  0.94422,  0.96417,
    0.98413,  -0.99592, -0.97596, -0.95601, -0.93605, -0.91610, -0.89615,
    -0.87619, -0.85624, -0.83628, -0.81633, -0.79637, -0.77642, -0.75646,
    -0.73651, -0.71655, -0.69660, -0.67664, -0.65669, -0.63673, -0.61678,
    -0.59683, -0.57687, -0.55692, -0.53696, -0.51701, -0.49705, -0.47710,
    -0.45714, -0.43719, -0.41723, -0.39728, -0.37732, -0.35737, -0.33741,
    -0.31746, -0.29751, -0.27755, -0.25760, -0.23764, -0.21769, -0.19773,
    -0.17778, -0.15782, -0.13787, -0.11791, -0.09796, -0.07800, -0.05805,
    -0.03810, -0.01814, 0.00181,  0.02177,  0.04172,  0.06168,  0.08163,
    0.10159,  0.12154,  0.14150,  0.16145,  0.18141,  0.20136,  0.22132,
    0.24127,  0.26122,  0.28118,  0.30113,  0.32109,  0.34104,  0.36100,
    0.38095,  0.40091,  0.42086,  0.44082,  0.46077,  0.48073,  0.50068,
    0.52063,  0.54059,  0.56054,  0.58050,  0.60045,  0.62041,  0.64036,
    0.66032,  0.68027,  0.70023,  0.72018,  0.74014,  0.76009,
};
const std::vector<long double> prime_triangle = {
    0.00000,  0.03991,  0.07982,  0.11973,  0.15964,  0.19955,  0.23946,
    0.27937,  0.31927,  0.35918,  0.39909,  0.43900,  0.47891,  0.51882,
    0.55873,  0.59864,  0.63855,  0.67846,  0.71837,  0.75828,  0.79819,
    0.83810,  0.87800,  0.91791,  0.95782,  0.99773,  0.96236,  0.92245,
    0.88254,  0.84263,  0.80272,  0.76281,  0.72290,  0.68299,  0.64308,
    0.60317,  0.56327,  0.52336,  0.48345,  0.44354,  0.40363,  0.36372,
    0.32381,  0.28390,  0.24399,  0.20408,  0.16417,  0.12426,  0.08435,
    0.04444,  0.00454,  -0.03537, -0.07528, -0.11519, -0.15510, -0.19501,
    -0.23492, -0.27483, -0.31474, -0.35465, -0.39456, -0.43447, -0.47438,
    -0.51429, -0.55419, -0.59410, -0.63401, -0.67392, -0.71383, -0.75374,
    -0.79365, -0.83356, -0.87347, -0.91338, -0.95329, -0.99320, -0.96689,
    -0.92698, -0.88707, -0.84717, -0.80726, -0.76735, -0.72744, -0.68753,
    -0.64762, -0.60771, -0.56780, -0.52789, -0.48798, -0.44807, -0.40816,
    -0.36825, -0.32834, -0.28844, -0.24853, -0.20862, -0.16871, -0.12880,
    -0.08889, -0.04898, -0.00907, 0.03084,  0.07075,  0.11066,  0.15057,
    0.19048,  0.23039,  0.27029,  0.31020,  0.35011,  0.39002,  0.42993,
    0.46984,  0.50975,  0.54966,  0.58957,  0.62948,  0.66939,  0.70930,
    0.74921,  0.78912,  0.82902,  0.86893,  0.90884,  0.94875,  0.98866,
    0.97143,  0.93152,  0.89161,  0.85170,  0.81179,  0.77188,  0.73197,
    0.69206,  0.65215,  0.61224,  0.57234,  0.53243,  0.49252,  0.45261,
    0.41270,  0.37279,  0.33288,  0.29297,  0.25306,  0.21315,  0.17324,
    0.13333,  0.09342,  0.05351,  0.01361,  -0.02630, -0.06621, -0.10612,
    -0.14603, -0.18594, -0.22585, -0.26576, -0.30567, -0.34558, -0.38549,
    -0.42540, -0.46531, -0.50522, -0.54512, -0.58503, -0.62494, -0.66485,
    -0.70476, -0.74467, -0.78458, -0.82449, -0.86440, -0.90431, -0.94422,
    -0.98413, -0.97596, -0.93605, -0.89615, -0.85624, -0.81633, -0.77642,
    -0.73651, -0.69660, -0.65669, -0.61678, -0.57687, -0.53696, -0.49705,
    -0.45714, -0.41723, -0.37732, -0.33741, -0.29751, -0.25760, -0.21769,
    -0.17778, -0.13787, -0.09796, -0.05805, -0.01814, 0.02177,  0.06168,
    0.10159,  0.14150,  0.18141,  0.22132,  0.26122,  0.30113,  0.34104,
    0.38095,  0.42086,  0.46077,  0.50068,  0.54059,  0.58050,  0.62041,
    0.66032,  0.70023,  0.74014,  0.78005,  0.81995,  0.85986,  0.89977,
    0.93968,  0.97959,  0.98050,  0.94059,  0.90068,  0.86077,  0.82086,
    0.78095,  0.74104,  0.70113,  0.66122,  0.62132,  0.58141,  0.54150,
    0.50159,  0.46168,  0.42177,  0.38186,  0.34195,  0.30204,  0.26213,
    0.22222,  0.18231,  0.14240,  0.10249,  0.06259,  0.02268,  -0.01723,
    -0.05714, -0.09705, -0.13696, -0.17687, -0.21678, -0.25669, -0.29660,
    -0.33651, -0.37642, -0.41633, -0.45624, -0.49615, -0.53605, -0.57596,
    -0.61587, -0.65578, -0.69569, -0.73560, -0.77551, -0.81542, -0.85533,
    -0.89524, -0.93515, -0.97506, -0.98503, -0.94512, -0.90522, -0.86531,
    -0.82540, -0.78549, -0.74558, -0.70567, -0.66576, -0.62585, -0.58594,
    -0.54603, -0.50612, -0.46621, -0.42630, -0.38639, -0.34649, -0.30658,
    -0.26667, -0.22676, -0.18685, -0.14694, -0.10703, -0.06712, -0.02721,
    0.01270,  0.05261,  0.09252,  0.13243,  0.17234,  0.21224,  0.25215,
    0.29206,  0.33197,  0.37188,  0.41179,  0.45170,  0.49161,  0.53152,
    0.57143,  0.61134,  0.65125,  0.69116,  0.73107,  0.77098,  0.81088,
    0.85079,  0.89070,  0.93061,  0.97052,  0.98957,  0.94966,  0.90975,
    0.86984,  0.82993,  0.79002,  0.75011,  0.71020,  0.67029,  0.63039,
    0.59048,  0.55057,  0.51066,  0.47075,  0.43084,  0.39093,  0.35102,
    0.31111,  0.27120,  0.23129,  0.19138,  0.15147,  0.11156,  0.07166,
    0.03175,  -0.00816, -0.04807, -0.08798, -0.12789, -0.16780, -0.20771,
    -0.24762, -0.28753, -0.32744, -0.36735, -0.40726, -0.44717, -0.48707,
    -0.52698, -0.56689, -0.60680, -0.64671, -0.68662, -0.72653, -0.76644,
    -0.80635, -0.84626, -0.88617, -0.92608, -0.96599, -0.99410, -0.95420,
    -0.91429, -0.87438, -0.83447, -0.79456, -0.75465, -0.71474, -0.67483,
    -0.63492, -0.59501, -0.55510, -0.51519, -0.47528, -0.43537, -0.39546,
    -0.35556, -0.31565, -0.27574, -0.23583, -0.19592, -0.15601, -0.11610,
    -0.07619, -0.03628, 0.00363,  0.04354,  0.08345,  0.12336,  0.16327,
    0.20317,  0.24308,  0.28299,  0.32290,  0.36281,  0.40272,  0.44263,
    0.48254,  0.52245,  0.56236,  0.60227,  0.64218,  0.68209,  0.72200,
    0.76190,  0.80181,  0.84172,  0.88163,  0.92154,  0.96145,  0.99864,
    0.95873,  0.91882,  0.87891,  0.83900,  0.79909,  0.75918,  0.71927,
    0.67937,  0.63946,  0.59955,  0.55964,  0.51973,  0.47982,
};

// Frequency to test
const double FREQ = 440.0;

/**
 * @brief Compares a buffer with an ideal wave.
 *
 * We expect an oscillator of audio and a vector containing samples
 * of an ideal wave.
 * We do the generic operations the oscillator for processing and then extract
 * the buffer.
 *
 * @param osc Oscillator to work with
 * @param expected Expected buffer of audio
 */
void CompareBuffer(BaseOscillator* osc,
                   const std::vector<long double>* expected) {

    // Process the oscillator:

    osc->meta_process();

    // Get the buffer:

    auto buff = osc->get_buffer();

    // Ensure the number of samples is correct:

    REQUIRE(int(buff.size()) == osc->get_info()->out_buffer);

    // Ensure each value is close:

    for (auto iter = buff.sbegin();
         static_cast<unsigned int>(iter.get_index()) < buff.size(); ++iter) {

        // Use assert near, prime sine is not as accurate as long double:

        REQUIRE_THAT(*iter, Catch::Matchers::WithinAbs(
                                expected->at(iter.get_index()), 0.0001));
    }
}

TEST_CASE("SineOscillator Test", "[osc]") {

    // Create the oscillator:

    SineOscillator sine(FREQ);

    SECTION("Default Values",
            "Ensures the constructor has proper default values") {

        REQUIRE_THAT(sine.get_frequency(),
                     Catch::Matchers::WithinAbs(440.0, 0.0001));
    }

    SECTION("Processing", "Ensures SineOscillator processing works correctly") {

        // Compare the buffer:

        CompareBuffer(&sine, &prime_sine);
    }
}

TEST_CASE("SquareOscillator Test", "[osc]") {

    // Create the oscillator:

    SquareOscillator square(FREQ);

    SECTION("Default Values",
            "Ensures the constructor has proper default values") {

        REQUIRE_THAT(square.get_frequency(),
                     Catch::Matchers::WithinAbs(440.0, 0.0001));
    }

    SECTION("Processing",
            "Ensures SquareOscillator processing works correctly") {

        // Compare the buffer:

        CompareBuffer(&square, &prime_square);
    }
}

TEST_CASE("SawtoothOscillator Test", "[osc]") {

    // Create the oscillator:

    SawtoothOscillator saw(FREQ);

    SECTION("Default Values",
            "Ensures the constructor has proper default values") {

        REQUIRE_THAT(saw.get_frequency(),
                     Catch::Matchers::WithinAbs(440.0, 0.0001));
    }

    SECTION("Processing",
            "Ensures SawtoothOscillator processing works correctly") {

        // Compare the buffer:

        CompareBuffer(&saw, &prime_saw);
    }
}

TEST_CASE("TriangleOscillator Test", "[osc]") {

    // Create the oscillator:

    TriangleOscillator triangle(FREQ);

    SECTION("Default Values",
            "Ensures the constructor has proper default values") {

        REQUIRE_THAT(triangle.get_frequency(),
                     Catch::Matchers::WithinAbs(440.0, 0.0001));
    }

    SECTION("Processing",
            "Ensures TriangleOscillator processing works correctly") {

        // Compare the buffer:

        CompareBuffer(&triangle, &prime_triangle);
    }
}
